// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.1
// source: Proto/auth.proto

package proto

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTokensMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Guid          string                 `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokensMsg) Reset() {
	*x = GetTokensMsg{}
	mi := &file_Proto_auth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokensMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensMsg) ProtoMessage() {}

func (x *GetTokensMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Proto_auth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensMsg.ProtoReflect.Descriptor instead.
func (*GetTokensMsg) Descriptor() ([]byte, []int) {
	return file_Proto_auth_proto_rawDescGZIP(), []int{0}
}

func (x *GetTokensMsg) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type RefreshTokensMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Refresh       string                 `protobuf:"bytes,1,opt,name=refresh,proto3" json:"refresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshTokensMsg) Reset() {
	*x = RefreshTokensMsg{}
	mi := &file_Proto_auth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshTokensMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokensMsg) ProtoMessage() {}

func (x *RefreshTokensMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Proto_auth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokensMsg.ProtoReflect.Descriptor instead.
func (*RefreshTokensMsg) Descriptor() ([]byte, []int) {
	return file_Proto_auth_proto_rawDescGZIP(), []int{1}
}

func (x *RefreshTokensMsg) GetRefresh() string {
	if x != nil {
		return x.Refresh
	}
	return ""
}

type GetTokensReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Access        string                 `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
	Refresh       string                 `protobuf:"bytes,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokensReply) Reset() {
	*x = GetTokensReply{}
	mi := &file_Proto_auth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokensReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensReply) ProtoMessage() {}

func (x *GetTokensReply) ProtoReflect() protoreflect.Message {
	mi := &file_Proto_auth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensReply.ProtoReflect.Descriptor instead.
func (*GetTokensReply) Descriptor() ([]byte, []int) {
	return file_Proto_auth_proto_rawDescGZIP(), []int{2}
}

func (x *GetTokensReply) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

func (x *GetTokensReply) GetRefresh() string {
	if x != nil {
		return x.Refresh
	}
	return ""
}

type RefreshTokensReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Access        string                 `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
	Refresh       string                 `protobuf:"bytes,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshTokensReply) Reset() {
	*x = RefreshTokensReply{}
	mi := &file_Proto_auth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshTokensReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokensReply) ProtoMessage() {}

func (x *RefreshTokensReply) ProtoReflect() protoreflect.Message {
	mi := &file_Proto_auth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokensReply.ProtoReflect.Descriptor instead.
func (*RefreshTokensReply) Descriptor() ([]byte, []int) {
	return file_Proto_auth_proto_rawDescGZIP(), []int{3}
}

func (x *RefreshTokensReply) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

func (x *RefreshTokensReply) GetRefresh() string {
	if x != nil {
		return x.Refresh
	}
	return ""
}

type GetGUIDReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Guid          string                 `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGUIDReply) Reset() {
	*x = GetGUIDReply{}
	mi := &file_Proto_auth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGUIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGUIDReply) ProtoMessage() {}

func (x *GetGUIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_Proto_auth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGUIDReply.ProtoReflect.Descriptor instead.
func (*GetGUIDReply) Descriptor() ([]byte, []int) {
	return file_Proto_auth_proto_rawDescGZIP(), []int{4}
}

func (x *GetGUIDReply) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type AddUserReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Guid          string                 `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserReply) Reset() {
	*x = AddUserReply{}
	mi := &file_Proto_auth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserReply) ProtoMessage() {}

func (x *AddUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_Proto_auth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserReply.ProtoReflect.Descriptor instead.
func (*AddUserReply) Descriptor() ([]byte, []int) {
	return file_Proto_auth_proto_rawDescGZIP(), []int{5}
}

func (x *AddUserReply) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

var File_Proto_auth_proto protoreflect.FileDescriptor

var file_Proto_auth_proto_rawDesc = []byte{
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x5f, 0x6d, 0x73, 0x67, 0x12, 0x50, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x32, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x47, 0x55, 0x49, 0x44, 0x4a, 0x26, 0x22, 0x36, 0x36, 0x64, 0x38,
	0x39, 0x62, 0x30, 0x62, 0x2d, 0x65, 0x61, 0x61, 0x65, 0x2d, 0x34, 0x38, 0x35, 0x33, 0x2d, 0x39,
	0x30, 0x63, 0x33, 0x2d, 0x32, 0x33, 0x38, 0x64, 0x34, 0x35, 0x33, 0x31, 0x62, 0x64, 0x31, 0x61,
	0x22, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x12, 0x79, 0x0a,
	0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f,
	0x92, 0x41, 0x5c, 0x2a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x32, 0x0d, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x42, 0x22, 0x74, 0x32,
	0x2b, 0x6b, 0x50, 0x4b, 0x43, 0x34, 0x78, 0x2b, 0x34, 0x54, 0x76, 0x76, 0x41, 0x52, 0x4f, 0x61,
	0x5a, 0x6b, 0x4d, 0x48, 0x65, 0x61, 0x6a, 0x53, 0x43, 0x4d, 0x47, 0x41, 0x75, 0x38, 0x78, 0x56,
	0x74, 0x63, 0x51, 0x6e, 0x58, 0x67, 0x38, 0x41, 0x53, 0x34, 0x46, 0x62, 0x31, 0x49, 0x35, 0x46,
	0x46, 0x6e, 0x70, 0x38, 0x4c, 0x30, 0x79, 0x78, 0x2b, 0x36, 0x45, 0x44, 0x30, 0x71, 0x22, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0xf0, 0x01, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x01,
	0x92, 0x41, 0xd3, 0x01, 0x2a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x0c, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0xba, 0x01, 0x22, 0x65, 0x79,
	0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a, 0x49, 0x55, 0x7a, 0x55, 0x78, 0x4d, 0x69,
	0x49, 0x73, 0x49, 0x6e, 0x52, 0x35, 0x63, 0x43, 0x49, 0x36, 0x49, 0x6b, 0x70, 0x58, 0x56, 0x43,
	0x4a, 0x39, 0x2e, 0x65, 0x79, 0x4a, 0x48, 0x56, 0x55, 0x6c, 0x45, 0x49, 0x6a, 0x6f, 0x69, 0x59,
	0x57, 0x4a, 0x6a, 0x49, 0x69, 0x77, 0x69, 0x55, 0x32, 0x56, 0x7a, 0x63, 0x32, 0x6c, 0x76, 0x62,
	0x6b, 0x6c, 0x6b, 0x49, 0x6a, 0x6f, 0x78, 0x4c, 0x43, 0x4a, 0x6c, 0x65, 0x48, 0x41, 0x69, 0x4f,
	0x6a, 0x45, 0x33, 0x4e, 0x54, 0x45, 0x31, 0x4e, 0x44, 0x51, 0x32, 0x4e, 0x44, 0x4e, 0x39, 0x2e,
	0x46, 0x54, 0x62, 0x73, 0x72, 0x55, 0x74, 0x78, 0x4b, 0x7a, 0x52, 0x4a, 0x73, 0x6f, 0x6c, 0x45,
	0x42, 0x52, 0x34, 0x58, 0x66, 0x6b, 0x79, 0x69, 0x75, 0x6d, 0x6a, 0x37, 0x6e, 0x54, 0x50, 0x64,
	0x54, 0x75, 0x43, 0x63, 0x72, 0x76, 0x78, 0x6c, 0x68, 0x41, 0x48, 0x37, 0x61, 0x46, 0x49, 0x4f,
	0x57, 0x57, 0x5a, 0x68, 0x6a, 0x53, 0x63, 0x41, 0x6f, 0x54, 0x63, 0x47, 0x63, 0x33, 0x6a, 0x56,
	0x6d, 0x6f, 0x53, 0x62, 0x56, 0x36, 0x50, 0x5f, 0x61, 0x71, 0x68, 0x43, 0x62, 0x55, 0x71, 0x71,
	0x6c, 0x62, 0x50, 0x37, 0x33, 0x67, 0x22, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x79, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x32, 0x0d,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x42, 0x22,
	0x74, 0x32, 0x2b, 0x6b, 0x50, 0x4b, 0x43, 0x34, 0x78, 0x2b, 0x34, 0x54, 0x76, 0x76, 0x41, 0x52,
	0x4f, 0x61, 0x5a, 0x6b, 0x4d, 0x48, 0x65, 0x61, 0x6a, 0x53, 0x43, 0x4d, 0x47, 0x41, 0x75, 0x38,
	0x78, 0x56, 0x74, 0x63, 0x51, 0x6e, 0x58, 0x67, 0x38, 0x41, 0x53, 0x34, 0x46, 0x62, 0x31, 0x49,
	0x35, 0x46, 0x46, 0x6e, 0x70, 0x38, 0x4c, 0x30, 0x79, 0x78, 0x2b, 0x36, 0x45, 0x44, 0x30, 0x71,
	0x22, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x83, 0x03, 0x0a, 0x13, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0xf0, 0x01, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xd7, 0x01, 0x92, 0x41, 0xd3, 0x01, 0x2a, 0x06, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x32, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4a, 0xba, 0x01, 0x22, 0x65, 0x79, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a, 0x49,
	0x55, 0x7a, 0x55, 0x78, 0x4d, 0x69, 0x49, 0x73, 0x49, 0x6e, 0x52, 0x35, 0x63, 0x43, 0x49, 0x36,
	0x49, 0x6b, 0x70, 0x58, 0x56, 0x43, 0x4a, 0x39, 0x2e, 0x65, 0x79, 0x4a, 0x48, 0x56, 0x55, 0x6c,
	0x45, 0x49, 0x6a, 0x6f, 0x69, 0x59, 0x57, 0x4a, 0x6a, 0x49, 0x69, 0x77, 0x69, 0x55, 0x32, 0x56,
	0x7a, 0x63, 0x32, 0x6c, 0x76, 0x62, 0x6b, 0x6c, 0x6b, 0x49, 0x6a, 0x6f, 0x78, 0x4c, 0x43, 0x4a,
	0x6c, 0x65, 0x48, 0x41, 0x69, 0x4f, 0x6a, 0x45, 0x33, 0x4e, 0x54, 0x45, 0x31, 0x4e, 0x44, 0x51,
	0x32, 0x4e, 0x44, 0x4e, 0x39, 0x2e, 0x46, 0x54, 0x62, 0x73, 0x72, 0x55, 0x74, 0x78, 0x4b, 0x7a,
	0x52, 0x4a, 0x73, 0x6f, 0x6c, 0x45, 0x42, 0x52, 0x34, 0x58, 0x66, 0x6b, 0x79, 0x69, 0x75, 0x6d,
	0x6a, 0x37, 0x6e, 0x54, 0x50, 0x64, 0x54, 0x75, 0x43, 0x63, 0x72, 0x76, 0x78, 0x6c, 0x68, 0x41,
	0x48, 0x37, 0x61, 0x46, 0x49, 0x4f, 0x57, 0x57, 0x5a, 0x68, 0x6a, 0x53, 0x63, 0x41, 0x6f, 0x54,
	0x63, 0x47, 0x63, 0x33, 0x6a, 0x56, 0x6d, 0x6f, 0x53, 0x62, 0x56, 0x36, 0x50, 0x5f, 0x61, 0x71,
	0x68, 0x43, 0x62, 0x55, 0x71, 0x71, 0x6c, 0x62, 0x50, 0x37, 0x33, 0x67, 0x22, 0x52, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x79, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x07, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x32, 0x0d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x4a, 0x42, 0x22, 0x74, 0x32, 0x2b, 0x6b, 0x50, 0x4b, 0x43, 0x34, 0x78, 0x2b,
	0x34, 0x54, 0x76, 0x76, 0x41, 0x52, 0x4f, 0x61, 0x5a, 0x6b, 0x4d, 0x48, 0x65, 0x61, 0x6a, 0x53,
	0x43, 0x4d, 0x47, 0x41, 0x75, 0x38, 0x78, 0x56, 0x74, 0x63, 0x51, 0x6e, 0x58, 0x67, 0x38, 0x41,
	0x53, 0x34, 0x46, 0x62, 0x31, 0x49, 0x35, 0x46, 0x46, 0x6e, 0x70, 0x38, 0x4c, 0x30, 0x79, 0x78,
	0x2b, 0x36, 0x45, 0x44, 0x30, 0x71, 0x22, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x22, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x55, 0x49, 0x44, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x50, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3c, 0x92, 0x41, 0x39, 0x2a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x32, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x47, 0x55, 0x49, 0x44, 0x4a, 0x26, 0x22, 0x36, 0x36, 0x64, 0x38, 0x39, 0x62, 0x30, 0x62,
	0x2d, 0x65, 0x61, 0x61, 0x65, 0x2d, 0x34, 0x38, 0x35, 0x33, 0x2d, 0x39, 0x30, 0x63, 0x33, 0x2d,
	0x32, 0x33, 0x38, 0x64, 0x34, 0x35, 0x33, 0x31, 0x62, 0x64, 0x31, 0x61, 0x22, 0x52, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x32, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x20, 0x47, 0x55, 0x49, 0x44, 0x4a, 0x26, 0x22, 0x36, 0x36, 0x64, 0x38, 0x39,
	0x62, 0x30, 0x62, 0x2d, 0x65, 0x61, 0x61, 0x65, 0x2d, 0x34, 0x38, 0x35, 0x33, 0x2d, 0x39, 0x30,
	0x63, 0x33, 0x2d, 0x32, 0x33, 0x38, 0x64, 0x34, 0x35, 0x33, 0x31, 0x62, 0x64, 0x31, 0x61, 0x22,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x32, 0xd2, 0x13, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12,
	0xdb, 0x03, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f,
	0x6d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x9f, 0x03, 0x92, 0x41,
	0x81, 0x03, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0a, 0x47, 0x65, 0x74, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x2b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x70, 0x61, 0x69,
	0x72, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x22, 0x56, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x42,
	0x7b, 0x22, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x4a, 0x57, 0x54, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x20, 0x22,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x61, 0x73, 0x65, 0x20,
	0x36, 0x34, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x7d, 0x4a, 0x94, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x8c, 0x01, 0x0a, 0x44, 0x49,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x58, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d,
	0x46, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x3a, 0x20, 0x22, 0x78, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2d,
	0x66, 0x6f, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x22, 0x7d, 0x4a, 0x48, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x41, 0x0a, 0x0e, 0x47, 0x55, 0x49, 0x44, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0x2f, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x3a, 0x20, 0x22, 0x47, 0x55, 0x49, 0x44, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0xdd, 0x05,
	0x0a, 0x0d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x95, 0x05, 0x92, 0x41, 0xf3, 0x04, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x70, 0x61, 0x69, 0x72, 0x1a, 0x87, 0x01, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x20, 0x46, 0x75, 0x6e,
	0x63, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x69, 0x66, 0x20, 0x69, 0x70, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6c, 0x64, 0x20, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4a, 0x6a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x63, 0x22, 0x61, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x7b,
	0x22, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x65, 0x77, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x20, 0x22, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x65, 0x77, 0x20, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x4a, 0x82, 0x01, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x7b, 0x0a, 0x33, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x78,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x66, 0x6f, 0x72, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x30, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x78, 0x2d, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x22,
	0x7d, 0x4a, 0x73, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x6c, 0x0a, 0x3a, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x72, 0x20,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x4f, 0x72, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x7b, 0x22, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x7d, 0x4a, 0x59, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x52, 0x0a,
	0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x40, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x7d, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x9a, 0x04,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x55, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x55, 0x49,
	0x44, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xe0, 0x03, 0x92, 0x41, 0xc4, 0x03, 0x0a, 0x04,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x10, 0x47, 0x65, 0x74, 0x20, 0x47, 0x55, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x2f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x67, 0x75, 0x69, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x4d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x46,
	0x22, 0x44, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x7b, 0x22, 0x67, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22,
	0x36, 0x36, 0x64, 0x38, 0x39, 0x62, 0x30, 0x62, 0x2d, 0x65, 0x61, 0x61, 0x65, 0x2d, 0x34, 0x38,
	0x35, 0x33, 0x2d, 0x39, 0x30, 0x63, 0x33, 0x2d, 0x32, 0x33, 0x38, 0x64, 0x34, 0x35, 0x33, 0x31,
	0x62, 0x64, 0x31, 0x61, 0x22, 0x7d, 0x4a, 0x68, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x61, 0x0a,
	0x18, 0x41, 0x75, 0x74, 0x68, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x7b,
	0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x22, 0x7d,
	0x4a, 0x60, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x59, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x68, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x21, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x69, 0x73, 0x20, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x22, 0x7d, 0x4a, 0x50, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x49, 0x0a, 0x0e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x37, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x23, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x20, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x22, 0x7d, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x12, 0xa6, 0x03, 0x0a, 0x06, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xeb, 0x02, 0x92, 0x41, 0xd1, 0x02, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x1a,
	0x3b, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x1f, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x18, 0x22, 0x16, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x02, 0x7b, 0x7d, 0x4a, 0x65, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x5e, 0x0a, 0x2c, 0x41, 0x75, 0x74, 0x68, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2c, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x7d, 0x4a, 0x69, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x62, 0x0a, 0x25, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x77, 0x68,
	0x69, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x64, 0x62, 0x73, 0x22, 0x39, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x3a, 0x20, 0x22, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x62,
	0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x12, 0xc5, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8b, 0x02,
	0x92, 0x41, 0xef, 0x01, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x08, 0x41, 0x64, 0x64, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x1a, 0x29, 0x41, 0x64, 0x64, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x20, 0x44, 0x42, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x67,
	0x75, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a,
	0x4d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x46, 0x22, 0x44, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x7b, 0x22,
	0x67, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x36, 0x36, 0x64, 0x38, 0x39, 0x62, 0x30, 0x62,
	0x2d, 0x65, 0x61, 0x61, 0x65, 0x2d, 0x34, 0x38, 0x35, 0x33, 0x2d, 0x39, 0x30, 0x63, 0x33, 0x2d,
	0x32, 0x33, 0x38, 0x64, 0x34, 0x35, 0x33, 0x31, 0x62, 0x64, 0x31, 0x61, 0x22, 0x7d, 0x4a, 0x63,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x5c, 0x0a, 0x25, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x64, 0x62, 0x73, 0x22, 0x33,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x12, 0x1f, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x42, 0xf1, 0x02, 0x92, 0x41,
	0xe5, 0x02, 0x12, 0x8c, 0x02, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x4f, 0x44, 0x53, 0x20, 0x54, 0x45,
	0x53, 0x54, 0x20, 0x54, 0x41, 0x53, 0x4b, 0x12, 0xac, 0x01, 0xd0, 0xad, 0xd1, 0x82, 0xd0, 0xbe,
	0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0,
	0xb5, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5,
	0x20, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1,
	0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1,
	0x8f, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd1, 0x84, 0xd1,
	0x83, 0xd0, 0xbd, 0xd0, 0xba, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb9, 0x2c, 0x20, 0xd1, 0x80, 0xd0,
	0xb5, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb7, 0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x89, 0xd0,
	0xb8, 0xd1, 0x85, 0x20, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd1,
	0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0x20, 0xd0, 0xb0,
	0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0,
	0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x22, 0x44, 0x0a, 0x0e, 0x59, 0x75, 0x6e, 0x75, 0x73, 0x6f,
	0x76, 0x20, 0x52, 0x75, 0x73, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x69, 0x73,
	0x73, 0x6f, 0x63, 0x68, 0x65, 0x6b, 0x1a, 0x14, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x6e, 0x79, 0x6e,
	0x79, 0x73, 0x6f, 0x76, 0x40, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x72, 0x75, 0x32, 0x03, 0x31, 0x2e,
	0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x2d, 0x0a, 0x2b, 0x0a, 0x06, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x12, 0x21, 0x08, 0x02, 0x12, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x5a, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Proto_auth_proto_rawDescOnce sync.Once
	file_Proto_auth_proto_rawDescData = file_Proto_auth_proto_rawDesc
)

func file_Proto_auth_proto_rawDescGZIP() []byte {
	file_Proto_auth_proto_rawDescOnce.Do(func() {
		file_Proto_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_Proto_auth_proto_rawDescData)
	})
	return file_Proto_auth_proto_rawDescData
}

var file_Proto_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_Proto_auth_proto_goTypes = []any{
	(*GetTokensMsg)(nil),       // 0: proto.GetTokens_msg
	(*RefreshTokensMsg)(nil),   // 1: proto.RefreshTokens_msg
	(*GetTokensReply)(nil),     // 2: proto.GetTokens_reply
	(*RefreshTokensReply)(nil), // 3: proto.RefreshTokens_reply
	(*GetGUIDReply)(nil),       // 4: proto.GetGUID_reply
	(*AddUserReply)(nil),       // 5: proto.AddUser_reply
	(*emptypb.Empty)(nil),      // 6: google.protobuf.Empty
}
var file_Proto_auth_proto_depIdxs = []int32{
	0, // 0: proto.Auth.GetTokens:input_type -> proto.GetTokens_msg
	1, // 1: proto.Auth.RefreshTokens:input_type -> proto.RefreshTokens_msg
	6, // 2: proto.Auth.GetGUID:input_type -> google.protobuf.Empty
	6, // 3: proto.Auth.Logout:input_type -> google.protobuf.Empty
	6, // 4: proto.Auth.AddUser:input_type -> google.protobuf.Empty
	2, // 5: proto.Auth.GetTokens:output_type -> proto.GetTokens_reply
	3, // 6: proto.Auth.RefreshTokens:output_type -> proto.RefreshTokens_reply
	4, // 7: proto.Auth.GetGUID:output_type -> proto.GetGUID_reply
	6, // 8: proto.Auth.Logout:output_type -> google.protobuf.Empty
	5, // 9: proto.Auth.AddUser:output_type -> proto.AddUser_reply
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Proto_auth_proto_init() }
func file_Proto_auth_proto_init() {
	if File_Proto_auth_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Proto_auth_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Proto_auth_proto_goTypes,
		DependencyIndexes: file_Proto_auth_proto_depIdxs,
		MessageInfos:      file_Proto_auth_proto_msgTypes,
	}.Build()
	File_Proto_auth_proto = out.File
	file_Proto_auth_proto_rawDesc = nil
	file_Proto_auth_proto_goTypes = nil
	file_Proto_auth_proto_depIdxs = nil
}
